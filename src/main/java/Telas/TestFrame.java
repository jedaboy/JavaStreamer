/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Telas;

import dao.DaoFactory;
import dao.Mp3DataDao;
import conversor.Conversor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintStream;
import java.sql.SQLException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.LineEvent;
import javax.sound.sampled.LineListener;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JSlider;
import javax.swing.Timer;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author jedaf
 */
public class TestFrame extends javax.swing.JFrame {

    private long frameCount;
    private double duration;
    private AudioFormat format;
    private Clip clip;
    boolean botaoNext = false;
    private boolean playing = false;

    private Timer playTimer;

    private boolean ignoreStateChange = false;
    Mp3DataDao mp3DataDao = DaoFactory.createMp3DataDao();
    ImageIcon image;

    /**
     * Creates new form TestFrame
     */
    public TestFrame() throws SQLException, LineUnavailableException, IOException, UnsupportedAudioFileException {

        initComponents();

        clipLoad();
        labelPic.setText("");

        clip.addLineListener(new LineListener() {
            @Override
            public void update(LineEvent evt) {
                if (evt.getType().equals(LineEvent.Type.STOP)
                        || evt.getType().equals(LineEvent.Type.CLOSE)) {
                    action.setText("Play");
                    playing = false;
                    playTimer.stop();
                    updateState();
                }
            }
        });

        playTimer = new Timer(1, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                updateState();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        slider = new javax.swing.JSlider();
        action = new javax.swing.JButton();
        labelTimeCounter = new javax.swing.JLabel();
        totalDuration = new javax.swing.JLabel();
        labelPic = new javax.swing.JLabel();
        next = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        slider.setValue(0);
        slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderStateChanged(evt);
            }
        });

        action.setText("Play");
        action.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                actionMouseClicked(evt);
            }
        });

        labelTimeCounter.setText("Tempo: ");

        totalDuration.setText("Total duration: ");
        totalDuration.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                totalDurationAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        next.setText("next");
        next.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nextMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(45, Short.MAX_VALUE)
                .addComponent(labelPic, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelTimeCounter)
                .addGap(43, 43, 43)
                .addComponent(slider, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(totalDuration)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(189, 189, 189)
                .addComponent(action)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(next)
                .addGap(80, 80, 80))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelPic, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(slider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(totalDuration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(labelTimeCounter, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(action)
                    .addComponent(next))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void totalDurationAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_totalDurationAncestorAdded

        int time = (int) duration;
        //Mp3DataDao mp3DataDao = DaoFactory.createMp3DataDao();

        ByteArrayOutputStream baos = new ByteArrayOutputStream();

        baos = converteSeg(time);
        //  totalFrameDuration.setText("Total frame duration:" + frameCount);
        totalDuration.setText(baos.toString());

    }//GEN-LAST:event_totalDurationAncestorAdded

    private void actionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_actionMouseClicked
       // labelPic.setIcon(image);
        //carrega imagemIcon com blob

        //Mp3DataDao mp3DataDao = DaoFactory.createMp3DataDao();
        if (!playing) {

            //responsavel por atualizar o timer
            int frame = getDesiredFrame();
            if (frame >= frameCount) {
                frame = 0;
            }
            clip.setFramePosition(frame);

            // labelFileName.setText("Playing File: " + audioFilePath); //not important
            System.out.print((int) clip.getMicrosecondLength() / 1_000_000);
            // clip lenght in seconds? this feature will set the slider lenght to the same length of the audio clip
            clip.start();
            action.setText("Stop");
            playing = true;
            playTimer.start();
        } else {

            clip.stop();
            action.setText("Play");
            playing = false;
            playTimer.stop();
        }


    }//GEN-LAST:event_actionMouseClicked

    private void sliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderStateChanged

        //---------------------Slider controler-----------------------------------
        Timer delayedUpdate = new Timer(1, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {

                int frame = getDesiredFrame();
                clip.setFramePosition(frame);

                int time = (int) getCurrentTime();
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                baos = converteSeg(time);
                labelTimeCounter.setText(baos.toString());

                //   currentFrame.setText("Current frame: " + frame);
                //  currentDuration.setText("Current duration: " + time);
            }
        });

        delayedUpdate.setRepeats(false);

        if (ignoreStateChange) {
            return;
        }
        delayedUpdate.restart();


    }//GEN-LAST:event_sliderStateChanged

    private void nextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nextMouseClicked
        try {
            if (!botaoNext) {
                mp3DataDao.setId(12);
                playing = true;
                actionMouseClicked(evt);
                
                System.out.print("id: " + mp3DataDao.getId());
                slider.setValue(0);
                clipLoad();
                 setTotalDuration();
                labelPic.setIcon(image);
                botaoNext = true;

            } else {
                mp3DataDao.setId(12);
                playing = true;
                slider.setValue(0);
                actionMouseClicked(evt);
                System.out.print("id: " + mp3DataDao.getId());
                clipLoad();
                 setTotalDuration();
                labelPic.setIcon(image);
                botaoNext = false;
            }
        } catch (SQLException ex) {
            Logger.getLogger(TestFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (LineUnavailableException ex) {
            Logger.getLogger(TestFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(TestFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedAudioFileException ex) {
            Logger.getLogger(TestFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_nextMouseClicked

    /**
     * @param args the command line arguments
     */
 

    public void updateState() {
        ignoreStateChange = true;
        int frame = clip.getFramePosition();
        int progress = (int) (((double) frame / (double) frameCount) * 100);
        slider.setValue(progress);
//        currentFrame.setText("Current frame: " + getDesiredFrame());

        int time = (int) getCurrentTime();
        int valor = time;
        int horas = valor / 3600;
        int restoHoras = valor % 3600;
        int minutos = restoHoras / 60;
        int restoMinutos = restoHoras % 60;
        int segundos = restoMinutos;

        //  System.out.printf(String.valueOf(slider.getValue()));
        // System.out.printf("%02d:%02d:%02d\n", horas, minutos, segundos);
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        PrintStream ps = new PrintStream(baos);
// IMPORTANT: Save the old System.out!
        PrintStream old = System.out;
// Tell Java to use your special stream
        System.setOut(ps);
// Print some output: goes to your special stream
        System.out.printf("%02d:%02d:%02d\n", horas, minutos, segundos);
// Put things back
        System.out.flush();
        System.setOut(old);
// Show what happened
        labelTimeCounter.setText(baos.toString());
        //  currentDuration.setText("Current duration: " + getCurrentTime());
        ignoreStateChange = false;
    }

    public double getCurrentTime() {
        int currentFrame = clip.getFramePosition();
        double time = (double) currentFrame / format.getFrameRate();
        return time;
    }

    public int getDesiredFrame() {
        int progress = slider.getValue();
        double frame = ((double) frameCount * ((double) progress / 100.0));
        return (int) frame;
    }

    public void clipLoad() throws SQLException, LineUnavailableException, IOException, UnsupportedAudioFileException {
        AudioInputStream converted = null;
        try {
            // File file = new File("C:\\Users\\jedaf\\Desktop\\meu-lugar.wav");
         

            Mp3DataDao mp3DataDao = DaoFactory.createMp3DataDao();
            Conversor convert = new Conversor();
          //   mp3DataDao.InsereImageBlob();
            //mp3DataDao.atualizaBlob();
         //  mp3DataDao.InsereBlob();
          //  mp3DataDao.InsereImageBlob();
          //  InsereImageBlob();
        // mp3DataDao.InsereFramerate();
           image = new ImageIcon(mp3DataDao.recebeImagemBlob());
            //pega a musica do db
            InputStream iS = mp3DataDao.recebeInputStream();
            //converte mp3 em wav apaga a copia da memoria rom deixando a musica apenas no buffer 
            byte[] byteArray = convert.mp3toWav(iS);

            //passamos o array de bytes para um formato aceito pela classe AudioInpuntStream e depois pegamos o cabeçalho para montar o audio
            ByteArrayInputStream bis = new ByteArrayInputStream(byteArray);
            long frameRate = mp3DataDao.recebeFrameRate();
            //montamos o audio
            converted = new AudioInputStream(bis, convert.getAudioFormat(), frameRate);
            // converted = AudioSystem.getAudioInputStream(file);
            //print que retorna se o arquivo wav foi apagado ou nao
            System.out.println(convert.getBool());

            format = converted.getFormat();
            frameCount = converted.getFrameLength();
            duration = ((double) frameCount) / format.getFrameRate();

            clip = AudioSystem.getClip();
            clip.open(converted);
        } catch (UnsupportedAudioFileException | IOException | LineUnavailableException ex) {
            ex.printStackTrace();
        }
    }

    public ByteArrayOutputStream converteSeg(int time) {
        int valor = time;
        int horas = valor / 3600;
        int restoHoras = valor % 3600;
        int minutos = restoHoras / 60;
        int restoMinutos = restoHoras % 60;
        int segundos = restoMinutos;

        System.out.printf(String.valueOf(slider.getValue()));
        System.out.printf("%02d:%02d:%02d\n", horas, minutos, segundos);

        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        PrintStream ps = new PrintStream(baos);
// IMPORTANT: Save the old System.out!
        PrintStream old = System.out;
// Tell Java to use your special stream
        System.setOut(ps);
// Print some output: goes to your special stream
        System.out.printf("%02d:%02d:%02d\n", horas, minutos, segundos);
// Put things back
        System.out.flush();
        System.setOut(old);

        return baos;
    }

    public void setTotalDuration(){
        int time = (int) duration;
        //Mp3DataDao mp3DataDao = DaoFactory.createMp3DataDao();

        ByteArrayOutputStream baos = new ByteArrayOutputStream();

        baos = converteSeg(time);
        //  totalFrameDuration.setText("Total frame duration:" + frameCount);
        totalDuration.setText(baos.toString());

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton action;
    private javax.swing.JLabel labelPic;
    private javax.swing.JLabel labelTimeCounter;
    private javax.swing.JButton next;
    private javax.swing.JSlider slider;
    private javax.swing.JLabel totalDuration;
    // End of variables declaration//GEN-END:variables
}
